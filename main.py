import module


# Создайте функцию-замыкание, которая запрашивает два целых числа:
# ○ от 1 до 100 для загадывания,
# ○ от 1 до 10 для количества попыток
# Функция возвращает функцию, которая через консоль просит угадать загаданное число за указанное число попыток.
def task1():
    guess = int(input("Загадайте число в пределах (1, 100): "))
    amount_of_tries = int(input("Введите количество попыток в предлах (1, 10): "))
    guess_number = module.task1.task1(guess, amount_of_tries)
    print(guess_number())


# Дорабатываем задачу 1.
# Превратите внешнюю функцию в декоратор.
# Он должен проверять входят ли переданные в функцию-угадайку числа в диапазоны [1, 100] и [1, 10].
# Если не входят, вызывать функцию со случайными числами из диапазонов.
def task2():
    guess_number = int(input("Загадайте число от 1 до 100"))
    amount_of_tries = int(input("Введите количество попыток от 1 до 10"))
    print(module.task2.task2(guess_number, amount_of_tries))


# Напишите декоратор, который сохраняет в json файл параметры декорируемой функции и результат, который она возвращает.
# При повторном вызове файл должен расширяться, а не перезаписываться.
# ●	Каждый ключевой параметр сохраните как отдельный ключ json словаря.
# ●	Для декорирования напишите функцию, которая может принимать как позиционные, так и ключевые аргументы.
# ●	Имя файла должно совпадать с именем декорируемой функции.
def task3():
    module.task3.main()


# Создайте декоратор с параметром.
# Параметр - целое число, количество запусков декорируемой функции.
def task4():
    module.task4.main()


# Объедините функции из прошлых задач.
# Функцию угадайку задекорируйте декораторами для сохранения параметров,
# декоратором контроля значений и декоратором для многократного запуска.
# Выберите верный порядок декораторов.
def task5():
    module.task5.main()


# Доработайте прошлую задачу добавив декоратор wraps в каждый из декораторов.
def task6():
    module.task6.main()


def main():
    # task1()
    # task2()
    # task3()
    # task4()
    # task5()
    task6()


if __name__ == '__main__':
    main()
